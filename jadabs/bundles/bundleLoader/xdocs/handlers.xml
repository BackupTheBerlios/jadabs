<?xml version="1.0" encoding="ISO-8859-1" ?>
<!-- 
/*
 * 
 */
 -->

<document>

  <properties>
    <title>Handlers</title>
  </properties>

  <body>
    <section name="Callback handlers">    
    <p>
	For applications that track the state of bundles in the system, like the shell or 
	the jadabs maingui, callback handlers can be registered to get notifications when 
	bundle states change. The <code>Loader</code> interface, which is the  
	base interface for both <code>BundleLoader</code> and <code>PluginLoader</code>
	provides the functions
	<source>
<![CDATA[
public interface Loader {

   (...)
   public void registerLoaderListener(LoaderListener listener);
   public void unregisterLoaderListener(LoaderListener listener);
   (...)   
}   
]]>
	</source>
	to register classes implementing 
<source>
<![CDATA[
public interface LoaderListener {
   
   public void itemChanged(String itemUuid, int type);
   
}
]]>
</source>
	For the <code>BundleLoader</code>, the observed items are Bundles and for the 
	<code>PluginLoader</code> plugins changes are notified. With the unified architecture, 
	the same method can handle all kinds of changes, no artificial duality of Bundles 
	and Plugins is forced. 	
	</p>
	</section>
    <section name="Request handlers">    
    <p>
	The <code>BundleLoader</code> is the most low level element in the Dynamic Loader
	architecture and is required, while the <code>PluginLoader</code> is optional, that 
	means, the <code>PluginLoader</code> Bundle can be left out in very lightweight 
	composition. This is the reason why the <code>BundleLoader</code> gets the control
	over the http daemon and higher level bundles use the <code>BundleLoader</code> to register
	additional handlers. 
<source>
<![CDATA[
public interface BundleLoader {
   
   (...)
   public void registerRequestHandler(HttpRequestHandler handler);
   public void unregisterRequestHandler(HttpRequestHandler handler);  
   (...)
}
]]>
</source>
	RequestHandlers are all classes implementing 
<source>
<![CDATA[
public interface HttpRequestHandler {

   public boolean delegate(HttpSocket request);

}
]]>
</source>
	RequestHandlers are expected to examine the HttpSocket if they can process the request
	and return true in this case, false otherwise, additionally they should retransmit 
	some return data to the requester. The architecture of the HttpDaemon is a fall-through
	chain, the request is delegated to all registered handlers until one of them returns true. 
	Finally, a standard handler catches all request that remain unprocessed by the handlers, 
	this standard handler returns either the favicon.ico if this is requested to serve 
	modern browser clients, or return a 404 Not Found. 
	With this architecture, a kind of lightweight web service is implemented, e.g. the 
	request "http://my.host/getobr/jadabs:maingui:0.7-snapshot:obr" will return the 
	requested obr. For compositions without JXME groupservice running, a simple 
	http connection is enough to exchange bundles with remote peers. 
	</p>
	</section>	
</body>
</document>